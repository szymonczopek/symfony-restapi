{% extends 'base.html.twig' %}

{% block title %}Posts{% endblock %}

{% block body %}
<style>
    .wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
</style>

<div class="wrapper">

    <div class="container mt-4">
        <table class="table">
            <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Body</th>
                <th>Author Name</th>
                <th>Delete</th>
            </tr>
            </thead>
            <tbody id="postsTableBody"></tbody>
        </table>
    </div>

    <!-- Modal for confirmation -->
    <div class="modal" tabindex="-1" role="dialog" id="deleteConfirmationModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this post?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {

            const apiEndpoint = '/api/posts';
            const tableBody = document.getElementById('postsTableBody');

            displayTable();

            // Funkcja do tworzenia wiersza w tabeli
            function createTableRow(post) {
                const row = document.createElement('tr');

                const idCell = document.createElement('td');
                idCell.textContent = post.id;
                row.appendChild(idCell);

                const titleCell = document.createElement('td');
                titleCell.textContent = post.title;
                row.appendChild(titleCell);

                const bodyCell = document.createElement('td');
                bodyCell.textContent = post.body;
                row.appendChild(bodyCell);

                const authorNameCell = document.createElement('td');
                authorNameCell.textContent = post.authorName;
                row.appendChild(authorNameCell);

                // Dodanie przycisku usuwania
                const deleteCell = document.createElement('td');
                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'X';
                deleteButton.classList.add('btn', 'btn-danger');
                deleteButton.addEventListener('click', () => showDeleteConfirmation(post.id));
                deleteCell.appendChild(deleteButton);
                row.appendChild(deleteCell);

                return row;
            }

            // Funkcja do wyświetlania okna potwierdzenia usuwania
            function showDeleteConfirmation(postId) {
                const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
                confirmDeleteBtn.onclick = () => deletePost(postId);
                $('#deleteConfirmationModal').modal('show');
            }

            // Funkcja do usuwania postu
            function deletePost(postId) {
                fetch(`${apiEndpoint}/${postId}`, {
                    method: 'DELETE',
                })
                    .then(response => {
                        if (response.ok) {
                            $('#deleteConfirmationModal').modal('hide');
                            // Odświeżenie tabeli po usunięciu
                            displayTable();
                        } else {
                            console.error('Error deleting post:', response.statusText);
                        }
                    })
                    .catch(error => console.error('Error deleting post:', error));
            }

            // Funkcja do wyswietlania i odświeżania tabeli
            function displayTable() {
                // Wyczyszczenie tabeli
                tableBody.innerHTML = '';

                // Pobranie i wyświetlenie danych z API
                fetch(apiEndpoint)
                    .then(response => response.json())
                    .then(data => {
                        data['hydra:member'].forEach(post => {
                            const row = createTableRow(post);
                            tableBody.appendChild(row);
                        });
                    })
                    .catch(error => console.error('Error fetching data:', error));
            }
        });
    </script>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>



</div>
{% endblock %}
